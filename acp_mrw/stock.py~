# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from openerp.osv import fields,osv
from openerp.tools.translate import _
import openerp.addons.decimal_precision as dp
from mrw.api import API
from mrw.picking import *
from mrw.utils import services
import tempfile
from datetime import datetime
import math
import sys
reload(sys)
sys.setdefaultencoding('utf-8')



# Overloaded stock_picking to manage carriers :
class stock_picking(osv.osv):
    _inherit = 'stock.picking'

    def _get_delivery_address(self, cr, uid, ids, field_name, arg, context=None):
        res = {}
        for pick in self.browse(cr, uid, ids, context=context):
            direccion = pick.partner_id.street
            codigo_postal = pick.partner_id.zip
            poblacion = pick.partner_id.city
            provincia = pick.partner_id.state_id.name
            pais = pick.partner_id.country_id.name
            telefono = pick.partner_id.phone
            contacto = pick.partner_id.persona_contacto

            if field_name == 'delivery_direccion':
                res[pick.id] = direccion

            if field_name == 'delivery_zip':
                res[pick.id] = codigo_postal

            if field_name == 'delivery_poblacion':
                res[pick.id] = poblacion

            if field_name == 'delivery_provincia':
                res[pick.id] = provincia

            if field_name == 'delivery_pais':
                res[pick.id] = pais

            if field_name == 'delivery_telefono':
                res[pick.id] = telefono

            if field_name == 'delivery_contacto':
                res[pick.id] = contacto                                                                                                      

        return res


    _columns = {
        'mrw_codigo_servicio': fields.selection([('0000', 'Urgente 10'),
                                   ('0005', 'Urgente Hoy'),
                                   ('0010', 'Promociones'),
                                   ('0100', 'Urgente 12'),
                                   ('0110', 'Urgente 14'),
                                   ('0120', 'Urgente 22'),
                                   ('0200', 'Urgente 19'),
                                   ('0205', 'Urgente 19 Expedicion'),
                                   ('0210', 'Urgente 19 Mas 40 Kilos'),
                                   ('0220', 'Urgente 19 Portugal'),
                                   ('0230', 'Bag 19'),
                                   ('0235', 'Bag 14'),
                                   ('0300', 'Economico'),
                                   ('0310', 'Economico Mas 40 Kilos'),
                                   ('0350', 'Economico Interinsular'),
                                   ('0400', 'Express Documentos'),
                                   ('0450', 'Express 2 Kilos'),
                                   ('0480', 'Caja Express 3 Kilos'),
                                   ('0490', 'Documentos 14'),
                                   ('0800', 'Ecommerce'),
                                   ('0810', 'Ecommerce Canje'),
                                   ], 'Código Servicio'),    	
        'mrw_fecha_recogida': fields.datetime('Date'),
        'mrw_reembolso': fields.selection([('N', 'Sin reembolso'),
                                   ('O', 'Con reembolso comisión en origen'),
                                   ('D', 'Con reembolso comisión en destino'),
                                   ], 'Reembolso'),
        'mrw_importe_reembolso': fields.float('Importe Reembolso'),
        'delivery_direccion': fields.function(_get_delivery_address, type='char', string='Direccion Entrega', help='Direccion del Cliente de Entrega'),
        'delivery_zip': fields.function(_get_delivery_address, type='char', string='Codigo Postal Entrega', help='Codigo Postal del Cliente de Entrega'),
        'delivery_poblacion': fields.function(_get_delivery_address, type='char', string='Población Entrega', help='Población del Cliente de Entrega'),
        'delivery_provincia': fields.function(_get_delivery_address, type='char', string='Provincia Entrega', help='Provincia del Cliente de Entrega'),
        'delivery_pais': fields.function(_get_delivery_address, type='char', string='Pais Entrega', help='Pais del Cliente de Entrega'),
        'delivery_telefono': fields.function(_get_delivery_address, type='char', string='Telefono Entrega', help='Telefono del Cliente de Entrega'),
        'delivery_contacto': fields.function(_get_delivery_address, type='char', string='Contacto Entrega', help='Persona de contacto del Cliente de Entrega'),
        'carrier_error': fields.char('Resultado solicitud',readonly=True, size=255),

    	}

    _defaults ={
	    'codigo_servicio':'0800',
	    }


    def button_mrwenvio(self, cr, uid, ids, context=None):

        deliv = self.browse(cr,uid,ids[0])
        mrw_conf_obj = self.pool.get('acp_mrw.configuracion')
        mrw_conf_ids = mrw_conf_obj.search(cr, uid,[('active','=',True)], context=context)

        if mrw_conf_ids:
            mrw_conf = mrw_conf_obj.browse(cr,uid,mrw_conf_ids)
            username = mrw_conf.username or ''
            password = mrw_conf.password or ''
            franchise = mrw_conf.franchise or ''
            subscriber = mrw_conf.subscriber or ''
            department = mrw_conf.department or ''
            debug = mrw_conf.debug or True
            fecha_c = ''

            if deliv.weight:
              peso = int(math.ceil(deliv.weight))
            else:
              peso = ''            


            if deliv.mrw_fecha_recogida:
                fecha_d = datetime.strptime(deliv.mrw_fecha_recogida, '%Y-%m-%d %H:%M:%S')
                fecha_c = fecha_d.strftime('%d/%m/%Y')


            picking_api = Picking(username, password, franchise, subscriber, department, debug)


            data = {}
            data['via'] = deliv.delivery_direccion or '' 
            data['codigo_postal'] = deliv.delivery_zip or ''
            data['poblacion'] = deliv.delivery_poblacion or ''
            data['provincia'] =  deliv.delivery_provincia or ''
            data['nif'] = deliv.partner_id.vat or ''
            data['nombre'] = deliv.partner_id.name or ''
            data['telefono'] = deliv.delivery_telefono or ''
            data['contacto'] = deliv.delivery_contacto or ''
            data['atencion_de'] = deliv.delivery_contacto or ''
            data['observaciones'] = ''
            data['fecha'] = fecha_c or ''
            data['referencia'] = deliv.name
            data['codigo_servicio'] = deliv.mrw_codigo_servicio
            data['bultos'] = deliv.number_of_packages or ''
            data['peso'] = peso
            data['reembolso'] = deliv.mrw_reembolso or 'N'
            data['importe_reembolso'] = str(deliv.mrw_importe_reembolso) or ''

            reference, error = picking_api.create(data)
            print "<<<<<<<<<<<<<<<<<<  reference: ", reference
            print "<<<<<<<<<<<<<<<<<<  error: ", error
            url = ''

            if reference:
                self.write(cr, uid, ids[0],{'carrier_tracking_ref':reference})
                if debug:
                    url = 'http://sagec-test.mrw.es/Panel.aspx?Franq=%s&Ab=%s&Dep=&Pwd=%s&Usr=%s&NumEnv=%s' %(franchise, subscriber, password, username, reference)
                else:
                    url = 'http://sagec.mrw.es/Panel.aspx?Franq=%s&Ab=%s&Dep=&Pwd=%s&Usr=%s&NumEnv=%s' %(franchise, subscriber, password, username, reference)


            if error:
                self.write(cr, uid, ids[0],{'carrier_error':error})

        return {
                  'name'     : 'Go to website',
                  'res_model': 'ir.actions.act_url',
                  'type'     : 'ir.actions.act_url',
                  'target'   : 'new',
                  'url'      : url
               }    




    def button_mrwetiqueta(self, cr, uid, ids, context=None):
        print "<<<<<<<<<<<<< button_mrwetiqueta"

        print "<<<<<<<<<<<<< button_mrwenvio"
        deliv = self.browse(cr,uid,ids[0])
        mrw_conf_obj = self.pool.get('acp_mrw.configuracion')
        mrw_conf_ids = mrw_conf_obj.search(cr, uid,[('active','=',True)], context=context)

        if mrw_conf_ids:
            mrw_conf = mrw_conf_obj.browse(cr,uid,mrw_conf_ids)
            username = mrw_conf.username or ''
            password = mrw_conf.password or ''
            franchise = mrw_conf.franchise or ''
            subscriber = mrw_conf.subscriber or ''
            department = mrw_conf.department or ''
            debug = mrw_conf.debug or True
            reference = deliv.carrier_tracking_ref
            
            print "<<<<<<<<<<<<< username: ",username
            if debug:
                url = 'http://sagec-test.mrw.es/Panel.aspx?Franq=%s&Ab=%s&Dep=&Pwd=%s&Usr=%s&NumEnv=%s' %(franchise, subscriber, password, username, reference)
            else:
                url = 'http://sagec.mrw.es/Panel.aspx?Franq=%s&Ab=%s&Dep=&Pwd=%s&Usr=%s&NumEnv=%s' %(franchise, subscriber, password, username, reference)

            print "<<<<<<<<<<<<<<<<<<  url: ",url
            
            #picking_api = Picking(username, password, franchise, subscriber, department, debug)

            #print "<<<<<<<<<<<<< Get PDF label"
            #if deliv.carrier_tracking_ref:
            #    reference = deliv.carrier_tracking_ref
            #    data = {}
            #    data['numero'] = deliv.carrier_tracking_ref
                #~ data['separador_numero'] = ''
                #~ data['inicio_fecha'] = ''
                #~ data['fin_envio'] = ''
                #~ data['etiqueta_envio'] = ''
                #~ data['top_margin'] = ''
                #~ data['left_margin'] = ''
   

            #    label = picking_api.label(data)
            #    print "<<<<<<<<<<<<<<<<<<<<<  LABEL ",label
            #    if label:
            
            #        prefix =  'mrw-%s-label.' % reference
            #        fd, out_filename = tempfile.mkstemp(suffix=".pdf",prefix=prefix)    

            #        print "<<<<<<<<<<<<<<<<  out_filename: ",out_filename            
            #        print "<<<<<<<<<<<<<<<<  fd: ",fd         
            #        with open(out_filename,"wb") as f:
            #            f.write(label)
            #        os.close(fd)
            #        print "<<<<<<<<<<<<< Generated PDF label in %s" % out_filename

            #        with open(out_filename, 'rb') as pdf_file:
            #            pdf = pdf_file.read()                
            #    
            #    else:
            #        print "<<<<<<<<<<<<< Error get pdf file"
        #return pdf 

        return {
                  'name'     : 'Go to website',
                  'res_model': 'ir.actions.act_url',
                  'type'     : 'ir.actions.act_url',
                  'target'   : 'new',
                  'url'      : url
               }               


